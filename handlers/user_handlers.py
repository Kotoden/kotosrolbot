# handlers/user_handlers.py

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from database.db import get_db
from database import crud, models

router = Router()


@router.message(Command(commands=["start", "help"]))
async def cmd_start(message: Message) -> None:
    tg_id = message.from_user.id
    username = message.from_user.username
    full_name = f"{message.from_user.first_name} {message.from_user.last_name or ''}".strip()

    with next(get_db()) as db:
        user = crud.get_or_create_user(db, tg_id, username, full_name)

    await message.reply(
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{}</b>!\n\n"
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/categories ‚Äî –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤\n"
        "/orders ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã\n"
        "/order <i>order_id</i> ‚Äî –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞\n"
        "/help ‚Äî —ç—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞\n".format(user.full_name or user.username or tg_id),
        parse_mode="HTML"
    )


@router.message(Command(commands=["categories"]))
async def cmd_categories(message: Message) -> None:
    with next(get_db()) as db:
        cats = crud.get_all_categories(db)

    if not cats:
        return await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.", parse_mode="HTML")

    # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥)
    inline_keyboard = []
    row = []
    for cat in cats:
        btn = InlineKeyboardButton(text=cat.name, callback_data=f"show_cat_{cat.id}")
        row.append(btn)
        if len(row) == 2:
            inline_keyboard.append(row)
            row = []
    if row:
        inline_keyboard.append(row)

    kb = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await message.reply("<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>", parse_mode="HTML", reply_markup=kb)


@router.callback_query(lambda c: c.data and c.data.startswith("show_cat_"))
async def process_category_callback(callback: CallbackQuery) -> None:
    try:
        cat_id = int(callback.data.split("_")[-1])
    except (IndexError, ValueError):
        return await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", show_alert=True)

    with next(get_db()) as db:
        products = crud.get_products(db, category_id=cat_id)

    if not products:
        return await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", show_alert=True)

    text = f"<b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #{cat_id}:</b>\n"
    inline_keyboard = []
    for p in products:
        text += f"{p.id}. {p.name} ‚Äî {p.price:.2f}‚ÇΩ (–≤ –Ω–∞–ª–∏—á–∏–∏: {p.quantity})\n"
        btn = InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å {p.name}", callback_data=f"buy_{p.id}_1")
        inline_keyboard.append([btn])

    kb = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await callback.answer()
    await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)


@router.callback_query(lambda c: c.data and c.data.startswith("buy_"))
async def process_buy_callback(callback: CallbackQuery) -> None:
    parts = callback.data.split("_")
    if len(parts) != 3:
        return await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.", show_alert=True)
    try:
        prod_id = int(parts[1])
        qty = int(parts[2])
    except ValueError:
        return await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.", show_alert=True)

    tg_id = callback.from_user.id
    username = callback.from_user.username
    full_name = f"{callback.from_user.first_name} {callback.from_user.last_name or ''}".strip()

    with next(get_db()) as db:
        user = crud.get_or_create_user(db, tg_id, username, full_name)
        order = crud.create_order(db, user.id)
        try:
            item = crud.add_item_to_order(db, order.id, prod_id, qty)
        except Exception as e:
            return await callback.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞: {e}", show_alert=True)

        order_db, total_price = crud.get_order_details(db, order.id)

    text = (
        f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_db.id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
        f"–¢–æ–≤–∞—Ä: <b>{item.product.name}</b>\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{item.quantity}</b>\n"
        f"–¶–µ–Ω–∞ –∑–∞ —à—Ç.: <b>{item.unit_price:.2f}‚ÇΩ</b>\n\n"
        f"<b>–ò—Ç–æ–≥–æ: {total_price:.2f}‚ÇΩ</b>\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
    )
    await callback.answer()
    await callback.message.answer(text, parse_mode="HTML")


@router.message(Command(commands=["orders"]))
async def cmd_orders(message: Message) -> None:
    tg_id = message.from_user.id
    with next(get_db()) as db:
        user = db.query(models.User).filter(models.User.telegram_id == tg_id).one_or_none()
        if not user:
            return await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start.", parse_mode="HTML")
        orders = crud.get_orders_by_user(db, user.id)

    if not orders:
        return await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", parse_mode="HTML")

    text = "<b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n"
    for o in orders:
        ts = o.created_at.strftime("%Y-%m-%d %H:%M")
        text += f"#{o.id}: <i>{o.status}</i>, {ts}\n"
    text += "\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏, –≤–≤–µ–¥–∏—Ç–µ /order <i>order_id</i>"
    await message.reply(text, parse_mode="HTML")


@router.message(Command(commands=["order"]))
async def cmd_order_details(message: Message) -> None:
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await message.reply("‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /order <i>order_id</i>", parse_mode="HTML")

    order_id = int(parts[1])
    tg_id = message.from_user.id

    with next(get_db()) as db:
        user = db.query(models.User).filter(models.User.telegram_id == tg_id).one_or_none()
        if not user:
            return await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start.", parse_mode="HTML")

        try:
            order, total_price = crud.get_order_details(db, order_id)
        except Exception:
            return await message.reply("‚ùóÔ∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")

        if order.user_id != user.id:
            return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.", parse_mode="HTML")

        text = f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.id}:</b>\n"
        for item in order.items:
            text += f"{item.product.name} √ó {item.quantity} —à—Ç. ‚Äî {item.unit_price:.2f}‚ÇΩ/—à—Ç.\n"
        text += f"\n<b>–ò—Ç–æ–≥–æ:</b> {total_price:.2f}‚ÇΩ\n"
        text += f"–°—Ç–∞—Ç—É—Å: <i>{order.status}</i>"

    await message.reply(text, parse_mode="HTML")
